# Сервис регистрации (Registration_service):

@app.route("/add_user/", methods=["POST"])
def add_user(login: str, password: str, name: str, email: str):
    """
    Функция добавления нового пользователя. Принимает POST запрос с данными:
    login, password, от клиента и пытается через класс
    AddUser добавить пользователя в базу.
    :return: Код 200 и соответствующее сообщение, если попытка удачна, иначе код 400
    """

# Сервис авторизации (Authorisation_service):

@app.route("/get_token/", methods=["POST"])
def get_token():
    """
    Функция получает POST запрос с данными login и password от пользовательского
    сервиса, запрашивает по данным атрибутам токен для данного пользователя у класса
    GetToken.
    :return: token и код 200 при успешном получении токена
             код 403 и сообщение об ошибке при отказе в получении токена
    """

# Сервис чата (Chat_service):

@app.route("/send_message/", methods=["POST"])
def send_message():
    """
    Принимаем от клиента сообщение, его токен, логин адресата и дату/время отправки.
    Токен сверяем с БД. Если корректный:
    Подключаемся к очереди RabbitMQ, кладем в очередь с названием логина адресата сообщение
    и дату/время его отправки в JSON формате.
    :return: http response (код ответа с сообщением о том успешно ли доставлено сообщение)
    """


@app.route("/get_messages/", methods=["POST"])
def get_messages():
    """
    Выдает клиенту сообщение по его токену из очереди сообщений
    Клиент регулярно посылает POST запрос на этот контроллер, запрашивая новые сообщения для него.
    в этом запросе он передает свой токен (поэтому пост запрос, т.к. токен не должен быть в урле)
    :return: http response (код ответа с сообщением о том успешно ли доставлено сообщение)
    в случае наличия запрашиваемых сообщений в очереди, клиенту вовращается пакет сообщений в виде
     словаря to_receive, ключами которого являются логины пользователей, которые отправили сообщения
     запрашивающему пользователю, а значениями - вложенные словари, ключами которых являются дата-время
     отправки сообщения, а значениями - сами сообщения. Словарь to_receive сериализуется в JSON
    """

# Сервис истории сообщений (History_service):

@app.route("/history/", methods=["POST"])
def get_history():
    """
    Функция принимает данные из пост запроса от клиента в виде его токена, логина интересующего его собеседника
    и двух дат, ограничивающих интересующий его период времени переписки, по этим данным из БД извлекается
    набор сообщений для отправки на клиент пользователю
    :return: http response (код ответа с сообщением о том успешно ли доставлено сообщение)
    в случае наличия запрашиваемых сообщений в БД, возвращаются данные в виде списка history_pack,
    состоящего из сообщений, представленных, в свою очередь, в виде списков вида
     [логин_запрашивающего, логин_собеседника, сообщение, дата-время].
    Список history_pack сериализуется в JSON
    """
